ゲーム「2048」を解くプログラムAIを作ろうプロジェクト

(1) 2048は4✕4のタイルでできた盤面を用いて行うターン制のゲームである。
(2) 最初に空の4✕4のタイルのうち2枚に、2か4と書かれたタイルがランダムな位置に置かれる。
(3-1) プレイヤーは1ターンに上下左右の4つのコマンドから1つ選び、実行する。コマンドが実行されると指定した方向にすべてのタイルが動く。
(3-2)同じ数字のタイル2枚が、動いた方向に隣り合っていたときにはタイルに書くかれた数字が2倍になる。
(3-3)例えばある列で2 2 4 8となっていたときに右のコマンドを与えると(なし) 4 4 8 となる。
(3-4)なお、2 2 2 4のときに右を与えると、(なし) 2 4 4 となり、2 2 2 2のときに右を与えると(なし) (なし) 4 4となる。
(4-1)コマンドを動かしタイルが動いた時は、空いているタイルに2か4と書かれた新しいタイルが1枚埋まる。この確率は2が90%、4が10%である。これは(1)での初期盤面でも同じである。
(4-2)コマンドによってタイルが動かなかった時はパネルが生成されない。
(5)ゲームは動かせるタイルがなくなったときに終了する。
(6)本家は2048のタイルをつくるのが目的で、その後は自由に続けてプレイできるが、今回はAIということで2048は余裕だろうからノンストップでいくこととする(精一杯の煽り)。

内容

(1-1)入力は空白区切りの17個の数字一行で送られる。
(1-2)最初の16個はタイルに書かれている数字を表すのに使われている。
(1-3)一つの要素は2の乗数を表しており、例えば1ならば実際の2、5なら32を表す。
(1-4)要素の数字が0のときは空タイルを表す。
(1-5)最初の4つは1行目の4個の数字を左から順に並べたもの、次の4つは2行目の4個の数字、その次の4つは3行目、その次の4つは4行目である。
(2)最後の一つの数字は状態を表しており、0はちゃんとタイルが動いてゲーム続行している状態、1は出力したコマンドだとタイルが動かない状態、2はゲームオーバーを表すが、2が送られた後1秒放置しておくとAIプログラムもろとも落ちるので、ただスレッドが残ったりするのを防ぐためにある。
(3-1)1ターンの出力は4方向どちらかの指定をすればよい。
例として up などがあげられる。
(3-2)up, u, 2は下から上にタイルを寄せることを表す。down, 4 , dは上から下、right, 1, rは左から右、left, 3, lは右から左を表す。


プログラム"2048/2048.rb", "ai.cpp"の説明
一応n*mの盤面に対応している
2048/2048.rbは毎ターン
1 3 4 2 2 0 2 0 1 0 0 0 2 0 0 0 0
のような文字列をai実行ファイル(ai.cpp)に送信する。(16個盤面 + 状態0(通常))
ちなみに上の例だと
盤面 :   | すなわち(*は空) :
1 3 4 2  |  2  8 16  4
2 0 2 0  |  4  *  4  *
1 0 0 0  |  2  *  *  *
2 0 0 0  |  4  *  *  *
状態 : 0
を表す。

これをai.cppがstd::cinで受け取り、文字列received_dataに格納している。(注1)(注2)

そうして盤面データから動かすべき方向を決めた後、up、down、left、rightのどれかを出力すればそれが2048/2048.rbに伝わり、2048/2048.rbが処理を行ってくれて、また盤面情報が更新されて送られてくる。ゲームオーバーならここで終了する。


(注1)std::cinは空白ごとに処理を止めてしまうため、空白区切りの入力をするときはそれだけの回数を繰り返さなければならない。これはai.cppですでに実装してある。

(注2)今のai.cppは盤面データを全く使っていないAIとなっており、盤面データはただのデバッグメッセージに使われている。ただし本番では盤面データを使うと思うので、使う前提で話していく。
